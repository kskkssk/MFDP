import pandas as pd
from resume_parser import skills, experience, emp, city, schedule, specializations
import json


df = pd.DataFrame(columns=[
    'area', 'schedule', 'experience', 'professional_roles', 'skills',
    'employment_Проектная работа', 'employment_Стажировка', 'employment_Частичная занятость',
    'experience^3', 'has_experience'
])

emp_dict = {'employment_Проектная работа': 0, 'employment_Стажировка': 0, 'employment_Частичная занятость': 0}

for key in emp_dict:
 if isinstance(emp, str):
  if key[11:].lower() == emp.lower():
   emp_dict[key] = 1

ski = ','.join([skill.lower() for skill in skills])

dict_area = {'Москва': 167978.20830141546,
 'Калининград': 88352.94117647059,
 'Санкт-Петербург': 137470.6333333333,
 'Краснодар': 102671.75609756098,
 'Самара': 109325.68181818182,
 'Казань': 114980.86419753089,
 'Электроугли (Московская область)': 101000.0,
 'Новосибирск': 118865.64744318182,
 'Тула': 100593.75,
 'Ростов-на-Дону': 101539.58333333333,
 'Екатеринбург': 112300.87719298244,
 'Балашиха (Московская область)': 91213.5,
 'Красноярск': 89075.87878787878,
 'Тбилиси': 148345.0211111111,
 'Реутов (Московская область)': 93211.66666666667,
 'Польша': 91475.75,
 'Пермь': 101960.0,
 'Владивосток': 104783.33333333328,
 'Минск': 108409.52780769226,
 'Люберцы  (Московская область)': 120000.0,
 'Иркутск': 83833.33333333334,
 'Сербия': 213387.52400000003,
 'Барнаул': 94954.54545454544,
 'Тамбов': 117500.0,
 'Владикавказ': 225000.0,
 'Симферополь': 85833.33333333333,
 'Нижний Новгород': 108366.15384615386,
 'Томск': 123550.0,
 'Сочи': 104583.33333333333,
 'Тольятти': 93527.77777777778,
 'Челябинск': 94990.34212121212,
 'Ярославль': 107925.0,
 'Туймазы': 60000.0,
 'США': 297043.17500000005,
 'Кемерово': 107500.0,
 'Кострома': 83000.0,
 'Кипр': 172239.53333333333,
 'Электросталь (Московская область)': 94000.0,
 'Алматы': 149708.00999999998,
 'Хабаровск': 80416.66666666667,
 'Омск': 90646.48148148146,
 'Видное (Московская область)': 128750.0,
 'Воронеж': 109337.38095238093,
 'Иннополис': 88500.0,
 'Ташкент': 174832.065,
 'Чебоксары': 117345.83333333331,
 'Калуга': 87071.42857142857,
 'Армения': 275058.6,
 'Уфа': 101458.33333333333,
 'Волгоград': 91820.83333333333,
 'Саратов': 85395.83333333334,
 'Мытищи (Московская область)': 142000.0,
 'Саранск': 127500.0,
 'Астана': 174141.4975,
 'Нижнекамск': 104000.0,
 'Рязань': 89236.6111111111,
 'Тюмень': 89930.76923076922,
 'Адлер': 60000.0,
 'Киров (Кировская область)': 116130.0,
 'Ставрополь': 89500.0,
 'Липецк': 95667.14285714286,
 'Пенза': 72223.33333333333,
 'Новая Усмань': 62500.0,
 'Дзержинск (Нижегородская область)': 62500.0,
 'Набережные Челны': 87295.7142857143,
 'Старая Купавна (Московская область)': 74000.0,
 'Бердск': 73333.33333333333,
 'Севастополь': 75650.0,
 'Бабяково': 62500.0,
 'Улан-Удэ': 160000.0,
 'Железнодорожный  (Московская область)': 92783.75,
 'Курск': 110666.66666666667,
 'Мурманск': 77500.0,
 'Ижевск': 70000.0,
 'Чита': 70000.0,
 'Сургут': 100000.0,
 'Батуми': 106687.44,
 'Гусь-Хрустальный': 200000.0,
 'Псков': 105625.0,
 'Махачкала': 74083.33333333333,
 'Великий Новгород': 56545.0,
 'Владимир': 106666.66666666667,
 'Орел': 118125.0,
 'Дубна (Московская область)': 200000.0,
 'Йошкар-Ола': 57500.0,
 'Находка': 60000.0,
 'Апшеронск': 150000.0,
 'Астрахань': 98040.0,
 'Тверь': 114250.0,
 'Ульяновск': 97857.14285714286,
 'ОАЭ': 224472.0,
 'Димитровград': 150000.0,
 'Баку': 53958.34,
 'Подольск (Московская область)': 155462.5,
 'Иваново (Ивановская область)': 80666.66666666667,
 'Химки (Московская область)': 107142.85714285714,
 'Жуковский  (Московская область)': 140000.0,
 'Архангельск': 110000.0,
 'Новокузнецк': 113333.33333333333,
 'Миасс': 60000.0,
 'Оренбург': 64166.666666666664,
 'Троицк (Москва)': 191387.5,
 'Грозный': 102500.0,
 'Белгород': 114500.0,
 'Кольцово (Новосибирская область)': 92500.0,
 'Брянск': 60000.0,
 'Чехов (Московская область)': 191387.5,
 'Красногорск (Московская область)': 81000.0,
 'Аксай (Ростовская область)': 80000.0,
 'Ногинск (Московская область)': 70000.0,
 'Селятино (Московская область)': 79500.0,
 'Бийск': 80000.0,
 'Петрозаводск': 120000.0,
 'Петропавловск-Камчатский': 65000.0,
 'Наро-Фоминск (Московская область)': 79500.0,
 'Норильск': 85000.0,
 'Новочеркасск': 155000.0,
 'Королев (Московская область)': 184000.0,
 'Пушкино (Московская область)': 150000.0,
 'Бор': 90000.0,
 'Елец': 58000.0,
 'Ивантеевка (Московская область)': 150000.0,
 'Лебедянь': 58000.0,
 'Жигулевск': 60500.0,
 'Пятигорск': 95000.0,
 'Смоленск': 98750.0,
 'Щелково (Московская область)': 99500.0,
 'Гомель': 136091.41105,
 'Джанкой': 60000.0,
 'Фрязино (Московская область)': 99500.0,
 'Курган': 180000.0,
 'Светлоград': 75000.0,
 'Большой Камень': 87000.0,
 'Зеленоград': 126666.66666666667,
 'Волжский (Волгоградская область)': 80000.0,
 'Ханты-Мансийск': 92333.33333333333,
 'Якутск': 70000.0,
 'Новоуральск': 72500.0,
 'Солнечногорск (Московская область)': 150000.0,
 'Ноябрьск': 124500.0,
 'Котельники  (Московская область)': 62500.0,
 'Таганрог': 139166.66666666666,
 'Гродно': 68021.475,
 'Брест': 68334.52500000001,
 'Артем': 100000.0,
 'Одинцово (Московская область)': 250000.0,
 'Сыктывкар': 160000.0}

dict_schedule = {'Удаленная работа': 147489.27425457587,
 'Гибкий график': 149152.19456521745,
 'Полный день': 130120.6021167366,
 'Сменный график': 99005.465625,
 'Вахтовый метод': 72000.0}

dict_prof = {'Бизнес-аналитик': 134339.58739626553,
 'Аналитик': 125838.45891869537,
 'BI-аналитик, аналитик данных': 135485.09760726077,
 'Дата-сайентист': 164383.46970673074,
 'Продуктовый аналитик': 158463.32681818178,
 'Маркетолог-аналитик': 130731.25,
 'Системный аналитик': 161713.66937782808}

new_data = {
    'area': dict_area.get(city),
    'schedule': dict_schedule.get(schedule),
    'experience': experience,
    'professional_roles': dict_prof.get(specializations),
    'skills': ski,
    'employment_Проектная работа': emp_dict['employment_Проектная работа'],
    'employment_Стажировка': emp_dict['employment_Стажировка'],
    'employment_Частичная занятость': emp_dict['employment_Частичная занятость'],
    'experience^3': experience ** 3 if experience else 0,
    'has_experience': 1 if experience else 0
}

new_row = pd.DataFrame([new_data])
df = pd.concat([df, new_row], ignore_index=True)

json_file_path = '/Users/shura/PycharmProjects/HH_PROJECT/app/services/parser /skills_list.json'


def load_skills_from_json(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        skills_list = json.load(file)
    return skills_list


skills_list = load_skills_from_json(json_file_path)


def ecd_skills(df, skills):
    df['skills'] = df['skills'].fillna('')
    df['skills'] = df['skills'].apply(lambda x: [skill.strip() for skill in x.split(',')])
    for skill in skills:
        df[skill] = df['skills'].apply(lambda x: 1 if skill in x else 0)
    return df


ecd_df = df.copy()
ecd_skills(ecd_df, skills_list)

final_df = ecd_df.drop('skills', axis=1)
